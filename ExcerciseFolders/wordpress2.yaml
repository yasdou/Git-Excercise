AWSTemplateFormatVersion: 2010-09-09
Description: wordpress template

#add igw to vpc and routing table, add inbonud and outbound rule for ssh,

Parameters:

  AmazonLinuxAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  DBName:
    Default: MyDatabase
    Description: MySQL database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBRootPassword:
    NoEcho: 'true'
    Description: Root password for MySQL
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

Resources:
  myVPC:  
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/18
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: WordpressVPC

  PublicSubnet:  
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: us-west-2a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: 
        Ref: myVPC
      Tags:
      - Key: Name
        Value: WordpressPublicSubnet

  MyEC2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      InstanceType: t3.micro
      ImageId: !Ref AmazonLinuxAMIID
      KeyName: "wordpress"
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet: 
            - Ref: "SGwordpress"
          SubnetId: 
            Ref: "PublicSubnet"
      Tags:
      - Key: Name
        Value: EC2Wordpress
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          HOMEDIR=/home/ec2-user

          yum update -y
          
          amazon-linux-extras install lamp-mariadb10.2-php7.2

          echo Installing packages...
          echo Please ignore messages regarding SELinux...
          yum install -y \
            httpd \
            mariadb-server \
            php \
            php-gd \
            php-mbstring \
            php-mysqlnd \
            php-xml \
            php-xmlrpc

          MYSQL_ROOT_PASSWORD=${DBRootPassword}
          echo $MYSQL_ROOT_PASSWORD > $HOMEDIR/MYSQL_ROOT_PASSWORD
          chown ec2-user $HOMEDIR/MYSQL_ROOT_PASSWORD

          echo Starting database service...
          sudo systemctl start mariadb
          sudo systemctl enable mariadb

          echo Setting up basic database security...
          mysql -u root <<EOF
          UPDATE mysql.user SET Password=PASSWORD('$MYSQL_ROOT_PASSWORD') WHERE User='root';
          DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
          DELETE FROM mysql.user WHERE User='';
          DROP DATABASE IF EXISTS test;
          FLUSH PRIVILEGES;
          EOF

          echo Configuring Apache...
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www && find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;

          echo Starting Apache...
          sudo systemctl start httpd
          sudo systemctl enable httpd
          
          echo installing wordpress and creating mysqluser
          wget https://wordpress.org/latest.tar.gz
          tar -xzf latest.tar.gz -C /home/ec2-user
          sudo systemctl start mariadb

          DB_USER="wordpressuser"
          DB_PASSWORD="pass"
          DB_NAME="wordpressdb"

          # create user and grant privileges
          mysql -u root -p$MYSQL_ROOT_PASSWORD <<EOF
          CREATE DATABASE $DB_NAME;
          CREATE USER '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASSWORD';
          GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'localhost';
          FLUSH PRIVILEGES;
          EOF
          
          cp /home/ec2-user/wordpress/wp-config-sample.php /home/ec2-user/wordpress/wp-config.php
          sed -i "s/database_name_here/wordpressdb/" /home/ec2-user/wordpress/wp-config.php
          sed -i "s/username_here/wordpressuser/" /home/ec2-user/wordpress/wp-config.php
          sed -i "s/password_here/pass/" /home/ec2-user/wordpress/wp-config.php
          
          cp -r /home/ec2-user/wordpress/* /var/www/html/
          sudo systemctl restart httpd

          /opt/aws/bin/cfn-signal \
            -e $? \
            --stack ${AWS::StackName} \
            --resource LampInstance \
            --region ${AWS::Region}

  SGwordpress:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and ssh to client host
      VpcId: 
        Ref: myVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: SGWordpress

  myNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
        VpcId:
          Ref: myVPC
        Tags:
        - Key: Name
          Value: NACLWordpress
  
  InboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: myNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22
  
  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: myNACL
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: Name
        Value: RTWordpress
  
  myIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: IGW Wordpress
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myIGW

  myRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: myRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: myIGW
  
  myPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: PublicSubnet
      RouteTableId: 
        Ref: myRouteTable